function balancedForest(c, edges) {
    const nodes = c.map(cost => ({ cost, adj: [], visited: false, solved: false }));
    
    for(let [a,b] of edges) {
        nodes[a-1].adj.push(b-1);
        nodes[b-1].adj.push(a-1);
    }
    
    const dfs = n => {
        if (n.visited) return 0;
        n.visited = true;
        
        for (let a of n.adj)
            n.cost += dfs(nodes[a]);
        return n.cost;
    }
    
    const sum = dfs(nodes[0]);
    //console.log(sum, nodes);

    let min = sum;
    const excsum = {};
    const incsum = {};
    
    const solve = n => {
        if (n.solved) return;
        n.solved = true;
        
        const cost_a = 3 * n.cost - sum;
        const cost_b = (sum - n.cost) / 2 - n.cost;
        //console.log("solve", n, { incsum, excsum }, { min, cost_a, cost_b });

        // can split in two equal subtrees?
        if (sum % 2 === 0 && n.cost === (sum / 2)) min = Math.min(min, sum / 2);

        if (cost_a >= 0 && (
            excsum[n.cost] // another subtree with equal cost?
            || excsum[sum - 2 * n.cost] // another subtree with 1/3 cost
            || incsum[sum - n.cost]) // edge to remove
        ) min = Math.min(min, cost_a);

        if (cost_b >= 0 && (sum - n.cost) % 2 === 0) {
            if (excsum[(sum - n.cost) / 2] || incsum[(sum + n.cost) / 2]) 
                min = Math.min(min, cost_b);
        }

        incsum[n.cost] = true;
        for (let a of n.adj) solve(nodes[a]);
        delete incsum[n.cost];
        excsum[n.cost] = true;
    }
    
    solve(nodes[0]);
    return min === sum ? -1 : min;
}
